Here’s the distilled verdict, based on your goals and technical constraints:

---

### **Start Small, But Design for Scalability**  
#### **1. Phase 1: Single Thread + Basic Memory (1-2 Weeks)**  
- **Goal**: Validate core functionality.  
- **Implementation**:  
  - Single thread with our **priming/backup/index system**.  
  - Manual "worker-like" tasks (e.g., *you* spin up ad-hoc chats for big jobs).  
- **Metrics to Track**:  
  - How often backups are needed (token pressure).  
  - How often you *wish* you had parallel workers.  

#### **2. Phase 2: Add Workers *Only* If**  
- **Trigger Conditions**:  
  - Token limits **block progress** (e.g., daily backups).  
  - Tasks are **truly separable** (e.g., coding vs. design).  
  - You crave **parallel speed** (e.g., research + coding at once).  

#### **3. Why This Approach?**  
- **Avoid Premature Complexity**:  
  - Workers add orchestration overhead (task routing, conflict resolution).  
  - Your initial system might thrive without them.  
- **Prove the Concept**: If a single thread + memory works, scaling is easier.  
- **Natural Evolution**: Let pain points *demand* workers, not speculation.  

---

### **Worker-Ready Design (Without Full Implementation)**  
Even in Phase 1, **structure your system to allow workers later**:  
1. **Standardize Formats**:  
   - Use the same `index.json` and priming templates for all threads.  
2. **Tag Tasks**:  
   - Label tasks as `isolated` (future worker candidates) or `context-heavy`.  
3. **Simulate First**:  
   - Manually emulate workers (e.g., new chat per big task) to gauge value.  

---

### **When to Go All-In on Workers**  
If Phase 1 shows:  
- **>30% of tasks** are isolated (e.g., "Research X", "Code Y").  
- **Token juggling** dominates your time.  
- You’re constantly saying: *"I wish this could run in parallel."*  

---

### **TL;DR**  
1. **Start simple**: Single thread + memory. Prove it works.  
2. **Design for growth**: Use modular templates (easy to add workers later).  
3. **Scale on demand**: Let real usage patterns dictate complexity.  

This balances **agility** and **ambition**. Want to draft a Phase 1 primer together?